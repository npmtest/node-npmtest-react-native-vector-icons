{"/home/travis/build/npmtest/node-npmtest-react-native-vector-icons/test.js":"/* istanbul instrument in package npmtest_react_native_vector_icons */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-vector-icons/lib.npmtest_react_native_vector_icons.js":"/* istanbul instrument in package npmtest_react_native_vector_icons */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_react_native_vector_icons = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_react_native_vector_icons = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-vector-icons/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-react-native-vector-icons && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_react_native_vector_icons */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_react_native_vector_icons\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_react_native_vector_icons.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_react_native_vector_icons.rollup.js'] =\n            local.assetsDict['/assets.npmtest_react_native_vector_icons.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_react_native_vector_icons.__dirname + '/lib.npmtest_react_native_vector_icons.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-vector-icons/node_modules/react-native-vector-icons/index.js":"export { default as createIconSet } from './lib/create-icon-set';\nexport { default as createIconSetFromFontello } from './lib/create-icon-set-from-fontello';\nexport { default as createIconSetFromIcoMoon } from './lib/create-icon-set-from-icomoon';\n","/home/travis/build/npmtest/node-npmtest-react-native-vector-icons/node_modules/react-native-vector-icons/Entypo.js":"/**\n * Entypo icon set component.\n * Usage: <Entypo name=\"icon-name\" size={20} color=\"#4F8EF7\" />\n */\n\nimport createIconSet from './lib/create-icon-set';\nimport glyphMap from './glyphmaps/Entypo.json';\n\nconst iconSet = createIconSet(glyphMap, 'Entypo', 'Entypo.ttf');\n\nexport default iconSet;\n\nexport const Button = iconSet.Button;\nexport const TabBarItem = iconSet.TabBarItem;\nexport const TabBarItemIOS = iconSet.TabBarItemIOS;\nexport const ToolbarAndroid = iconSet.ToolbarAndroid;\nexport const getImageSource = iconSet.getImageSource;\n\n","/home/travis/build/npmtest/node-npmtest-react-native-vector-icons/node_modules/react-native-vector-icons/EvilIcons.js":"/**\n * EvilIcons icon set component.\n * Usage: <EvilIcons name=\"icon-name\" size={20} color=\"#4F8EF7\" />\n */\n\nimport createIconSet from './lib/create-icon-set';\nimport glyphMap from './glyphmaps/EvilIcons.json';\n\nconst iconSet = createIconSet(glyphMap, 'EvilIcons', 'EvilIcons.ttf');\n\nexport default iconSet;\n\nexport const Button = iconSet.Button;\nexport const TabBarItem = iconSet.TabBarItem;\nexport const TabBarItemIOS = iconSet.TabBarItemIOS;\nexport const ToolbarAndroid = iconSet.ToolbarAndroid;\nexport const getImageSource = iconSet.getImageSource;\n\n","/home/travis/build/npmtest/node-npmtest-react-native-vector-icons/node_modules/react-native-vector-icons/FontAwesome.js":"/**\n * FontAwesome icon set component.\n * Usage: <FontAwesome name=\"icon-name\" size={20} color=\"#4F8EF7\" />\n */\n\nimport createIconSet from './lib/create-icon-set';\nimport glyphMap from './glyphmaps/FontAwesome.json';\n\nconst iconSet = createIconSet(glyphMap, 'FontAwesome', 'FontAwesome.ttf');\n\nexport default iconSet;\n\nexport const Button = iconSet.Button;\nexport const TabBarItem = iconSet.TabBarItem;\nexport const TabBarItemIOS = iconSet.TabBarItemIOS;\nexport const ToolbarAndroid = iconSet.ToolbarAndroid;\nexport const getImageSource = iconSet.getImageSource;\n\n","/home/travis/build/npmtest/node-npmtest-react-native-vector-icons/node_modules/react-native-vector-icons/Foundation.js":"/**\n * Foundation icon set component.\n * Usage: <Foundation name=\"icon-name\" size={20} color=\"#4F8EF7\" />\n */\n\nimport createIconSet from './lib/create-icon-set';\nimport glyphMap from './glyphmaps/Foundation.json';\n\nconst iconSet = createIconSet(glyphMap, 'fontcustom', 'Foundation.ttf');\n\nexport default iconSet;\n\nexport const Button = iconSet.Button;\nexport const TabBarItem = iconSet.TabBarItem;\nexport const TabBarItemIOS = iconSet.TabBarItemIOS;\nexport const ToolbarAndroid = iconSet.ToolbarAndroid;\nexport const getImageSource = iconSet.getImageSource;\n\n","/home/travis/build/npmtest/node-npmtest-react-native-vector-icons/node_modules/react-native-vector-icons/generate-icon.js":"#!/usr/bin/env node\n'use strict';\n\nvar argv = require('yargs')\n  .usage('Usage: $0 [options] path/to/styles.css \\nFor default template please provide --componentName and --fontFamily')\n  .demand(1)\n  .default('p', '.icon-')\n  .describe('p', 'CSS selector prefix')\n  .alias('p', 'prefix')\n  .default('t', __dirname + '/templates/bundled-icon-set.tpl')\n  .describe('t', 'Template in lodash format')\n  .alias('t', 'template')\n  .describe('o', 'Save output to file, defaults to STDOUT')\n  .alias('o', 'output')\n  .describe('g', 'Save glyphmap JSON to file')\n  .alias('g', 'glyphmap')\n  .argv;\n\nvar _ = require('lodash');\nvar fs = require('fs');\nvar generateIconSetFromCss = require('./lib/generate-icon-set-from-css');\n\nvar template;\nif(argv.template) {\n  template = fs.readFileSync(argv.template, { encoding: 'utf8' });\n}\n\nvar data = _.omit(argv, '_ $0 o output p prefix t template g glyphmap'.split(' '));\n\n\nvar content = generateIconSetFromCss(argv._, argv.prefix, template, data);\nif(argv.output) {\n  fs.writeFileSync(\n    argv.output,\n    content\n  );\n} else {\n  console.log(content);\n}\n\nif (argv.glyphmap) {\n  fs.writeFileSync(\n    argv.glyphmap,\n    generateIconSetFromCss(argv._, argv.prefix)\n  );\n}\n","/home/travis/build/npmtest/node-npmtest-react-native-vector-icons/node_modules/react-native-vector-icons/lib/generate-icon-set-from-css.js":"/**\n * @providesModule generateIconSetFromCss\n */\n'use strict';\nvar _ = require('lodash');\nvar fs = require('fs');\n\nfunction extractGlyphMapFromCss(files, selectorPattern) {\n  var styleRulePattern = '(\\\\.[A-Za-z0-9_.:, \\\\n\\\\t-]+)\\\\{[^}]*content: ?[\"\\\\\\'](?:\\\\\\\\([A-Fa-f0-9]+)|([^\"\\\\\\']+))[\"\\\\\\'][^}]*\\\\}';\n  var allStyleRules = new RegExp(styleRulePattern, 'g');\n  var singleStyleRules = new RegExp(styleRulePattern);\n  var allSelectors = new RegExp(selectorPattern, 'g');\n  var singleSelector = new RegExp(selectorPattern);\n\n  var glyphMap = {};\n  if(typeof files === 'string') {\n    files = [files];\n  }\n\n  files.forEach(function(fileName) {\n    var contents = fs.readFileSync(fileName, { encoding: 'utf8' });\n    var rules = contents.match(allStyleRules);\n    if(rules) {\n      rules.forEach(function(rule) {\n        var ruleParts = rule.match(singleStyleRules);\n        var hexCharCode = ruleParts[2], actualChar = ruleParts[3];\n        var charCode = hexCharCode ? parseInt(hexCharCode, 16) : (actualChar.length > 1 ? actualChar : actualChar.charCodeAt());\n        var selectors = ruleParts[1].match(allSelectors);\n        if(selectors) {\n          selectors.forEach(function(selector) {\n            var name = selector.match(singleSelector)[1];\n            glyphMap[name] = charCode;\n          });\n        }\n      });\n    }\n  });\n  return glyphMap;\n};\n\nfunction escapeRegExp(str) {\n  return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\n\nfunction generateIconSetFromCss(cssFiles, selectorPrefix, template, data) {\n  var glyphMap = extractGlyphMapFromCss(cssFiles, escapeRegExp(selectorPrefix) + '([A-Za-z0-9_-]+):before');\n  var content = JSON.stringify(glyphMap, null, '  ');\n  if(template) {\n    var compiled = _.template(template);\n    data = data || {};\n    data.glyphMap = content;\n    content = compiled(data);\n  }\n  return content;\n};\n\nmodule.exports = generateIconSetFromCss;\n","/home/travis/build/npmtest/node-npmtest-react-native-vector-icons/node_modules/react-native-vector-icons/generate-material-icons.js":"#!/usr/bin/env node\n'use strict';\n\nvar argv = require('yargs')\n  .usage('Usage: $0 [options] path/to/codepoints \\nFor default template please provide --componentName and --fontFamily')\n  .demand(1)\n  .default('t', __dirname + '/templates/bundled-icon-set.tpl')\n  .describe('t', 'Template in lodash format')\n  .alias('t', 'template')\n  .describe('o', 'Save output to file, defaults to STDOUT')\n  .alias('o', 'output')\n  .describe('g', 'Save glyphmap JSON to file')\n  .alias('g', 'glyphmap')\n  .argv;\n\nvar _ = require('lodash');\nvar fs = require('fs');\n\nvar extractGlyphMapFromCodepoints = function(fileName) {\n  var codepoints = fs.readFileSync(fileName, { encoding: 'utf8' }).split('\\n');\n  var glyphMap = {};\n  codepoints.forEach(function(point) {\n    var parts = point.split(' ');\n    if(parts.length === 2) {\n      glyphMap[parts[0].replace(/_/g, '-')] = parseInt(parts[1], 16);\n    }\n  });\n\n  return glyphMap;\n};\n\nvar template;\nif(argv.template) {\n  template = fs.readFileSync(argv.template, { encoding: 'utf8' });\n}\n\nvar data = _.omit(argv, '_ $0 o output t template g glyphmap'.split(' '));\nvar glyphMap = extractGlyphMapFromCodepoints(argv._[0]);\n\nvar content = JSON.stringify(glyphMap, null, '  ');\nif(template) {\n  var compiled = _.template(template);\n  data = data || {};\n  data.glyphMap = content;\n  content = compiled(data);\n}\n\nif(argv.output) {\n  fs.writeFileSync(\n    argv.output,\n    content\n  );\n} else {\n  console.log(content);\n}\n\nif (argv.glyphmap) {\n  fs.writeFileSync(\n    argv.glyphmap,\n    JSON.stringify(glyphMap, null, '  ')\n  );\n}\n","/home/travis/build/npmtest/node-npmtest-react-native-vector-icons/node_modules/react-native-vector-icons/Ionicons.js":"/**\n * Ionicons icon set component.\n * Usage: <Ionicons name=\"icon-name\" size={20} color=\"#4F8EF7\" />\n */\n\nimport createIconSet from './lib/create-icon-set';\nimport glyphMap from './glyphmaps/Ionicons.json';\n\nconst iconSet = createIconSet(glyphMap, 'Ionicons', 'Ionicons.ttf');\n\nexport default iconSet;\n\nexport const Button = iconSet.Button;\nexport const TabBarItem = iconSet.TabBarItem;\nexport const TabBarItemIOS = iconSet.TabBarItemIOS;\nexport const ToolbarAndroid = iconSet.ToolbarAndroid;\nexport const getImageSource = iconSet.getImageSource;\n\n","/home/travis/build/npmtest/node-npmtest-react-native-vector-icons/node_modules/react-native-vector-icons/MaterialCommunityIcons.js":"/**\n * MaterialCommunityIcons icon set component.\n * Usage: <MaterialCommunityIcons name=\"icon-name\" size={20} color=\"#4F8EF7\" />\n */\n\nimport createIconSet from './lib/create-icon-set';\nimport glyphMap from './glyphmaps/MaterialCommunityIcons.json';\n\nconst iconSet = createIconSet(glyphMap, 'Material Design Icons', 'MaterialCommunityIcons.ttf');\n\nexport default iconSet;\n\nexport const Button = iconSet.Button;\nexport const TabBarItem = iconSet.TabBarItem;\nexport const TabBarItemIOS = iconSet.TabBarItemIOS;\nexport const ToolbarAndroid = iconSet.ToolbarAndroid;\nexport const getImageSource = iconSet.getImageSource;\n\n","/home/travis/build/npmtest/node-npmtest-react-native-vector-icons/node_modules/react-native-vector-icons/MaterialIcons.js":"/**\n * MaterialIcons icon set component.\n * Usage: <MaterialIcons name=\"icon-name\" size={20} color=\"#4F8EF7\" />\n */\n\nimport createIconSet from './lib/create-icon-set';\nimport glyphMap from './glyphmaps/MaterialIcons.json';\n\nconst iconSet = createIconSet(glyphMap, 'Material Icons', 'MaterialIcons.ttf');\n\nexport default iconSet;\n\nexport const Button = iconSet.Button;\nexport const TabBarItem = iconSet.TabBarItem;\nexport const TabBarItemIOS = iconSet.TabBarItemIOS;\nexport const ToolbarAndroid = iconSet.ToolbarAndroid;\nexport const getImageSource = iconSet.getImageSource;\n\n","/home/travis/build/npmtest/node-npmtest-react-native-vector-icons/node_modules/react-native-vector-icons/Octicons.js":"/**\n * Octicons icon set component.\n * Usage: <Octicons name=\"icon-name\" size={20} color=\"#4F8EF7\" />\n */\n\nimport createIconSet from './lib/create-icon-set';\nimport glyphMap from './glyphmaps/Octicons.json';\n\nconst iconSet = createIconSet(glyphMap, 'Octicons', 'Octicons.ttf');\n\nexport default iconSet;\n\nexport const Button = iconSet.Button;\nexport const TabBarItem = iconSet.TabBarItem;\nexport const TabBarItemIOS = iconSet.TabBarItemIOS;\nexport const ToolbarAndroid = iconSet.ToolbarAndroid;\nexport const getImageSource = iconSet.getImageSource;\n\n","/home/travis/build/npmtest/node-npmtest-react-native-vector-icons/node_modules/react-native-vector-icons/RNIMigration.js":"import React from 'react';\nimport FontAwesome from 'react-native-vector-icons/FontAwesome';\nimport Foundation from 'react-native-vector-icons/Foundation';\nimport Ionicons from 'react-native-vector-icons/Ionicons';\nimport MaterialIcons from 'react-native-vector-icons/MaterialIcons';\nimport Zocial from 'react-native-vector-icons/Zocial';\nimport SimpleLineIcons from 'react-native-vector-icons/SimpleLineIcons';\n\nconst ICON_SET_MAP = {\n  fontawesome: FontAwesome,\n  foundation: Foundation,\n  ion: Ionicons,\n  material: MaterialIcons,\n  zocial: Zocial,\n  simpleline: SimpleLineIcons,\n};\n\n// This is a composition is a drop in replacement for users migrating from the\n// react-native-icons module. Please don't use this component for new apps/views.\nexport default class Icon extends React.Component {\n  static propTypes = {\n    name: React.PropTypes.string.isRequired,\n    size: React.PropTypes.number,\n    color: React.PropTypes.string,\n  };\n\n  setNativeProps(nativeProps) {\n    if (this.iconRef) {\n      this.iconRef.setNativeProps(nativeProps);\n    }\n  }\n\n  iconRef = null;\n\n  handleComponentRef = (ref) => {\n    this.iconRef = ref;\n  };\n\n  render() {\n    const nameParts = this.props.name.split('|');\n    const setName = nameParts[0];\n    const name = nameParts[1];\n\n    const IconSet = ICON_SET_MAP[setName];\n    if (!IconSet) {\n      throw new Error(`Invalid icon set \"${setName}\"`);\n    }\n\n    return (\n      <IconSet\n        allowFontScaling={false}\n        ref={this.handleComponentRef}\n        {...this.props}\n        name={name}\n      />\n    );\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-react-native-vector-icons/node_modules/react-native-vector-icons/SimpleLineIcons.js":"/**\n * SimpleLineIcons icon set component.\n * Usage: <SimpleLineIcons name=\"icon-name\" size={20} color=\"#4F8EF7\" />\n */\n\nimport createIconSet from './lib/create-icon-set';\nimport glyphMap from './glyphmaps/SimpleLineIcons.json';\n\nconst iconSet = createIconSet(glyphMap, 'simple-line-icons', 'SimpleLineIcons.ttf');\n\nexport default iconSet;\n\nexport const Button = iconSet.Button;\nexport const TabBarItem = iconSet.TabBarItem;\nexport const TabBarItemIOS = iconSet.TabBarItemIOS;\nexport const ToolbarAndroid = iconSet.ToolbarAndroid;\nexport const getImageSource = iconSet.getImageSource;\n\n","/home/travis/build/npmtest/node-npmtest-react-native-vector-icons/node_modules/react-native-vector-icons/Zocial.js":"/**\n * Zocial icon set component.\n * Usage: <Zocial name=\"icon-name\" size={20} color=\"#4F8EF7\" />\n */\n\nimport createIconSet from './lib/create-icon-set';\nimport glyphMap from './glyphmaps/Zocial.json';\n\nconst iconSet = createIconSet(glyphMap, 'zocial', 'Zocial.ttf');\n\nexport default iconSet;\n\nexport const Button = iconSet.Button;\nexport const TabBarItem = iconSet.TabBarItem;\nexport const TabBarItemIOS = iconSet.TabBarItemIOS;\nexport const ToolbarAndroid = iconSet.ToolbarAndroid;\nexport const getImageSource = iconSet.getImageSource;\n\n","/home/travis/build/npmtest/node-npmtest-react-native-vector-icons/node_modules/react-native-vector-icons/lib/create-icon-set-from-fontello.js":"import createIconSet from './create-icon-set';\n\nexport default function createIconSetFromFontello(config, fontFamilyArg, fontFile) {\n  const glyphMap = {};\n  config.glyphs.forEach((glyph) => {\n    glyphMap[glyph.css] = glyph.code;\n  });\n\n  const fontFamily = fontFamilyArg || config.name || 'fontello';\n\n  return createIconSet(\n    glyphMap,\n    fontFamily,\n    fontFile || `${fontFamily}.ttf`,\n  );\n}\n","/home/travis/build/npmtest/node-npmtest-react-native-vector-icons/node_modules/react-native-vector-icons/lib/create-icon-set-from-icomoon.js":"import createIconSet from './create-icon-set';\n\nexport default function createIconSetFromIcoMoon(config, fontFamilyArg, fontFile) {\n  const glyphMap = {};\n  config.icons.forEach((icon) => {\n    glyphMap[icon.properties.name] = icon.properties.code;\n  });\n\n  const fontFamily = fontFamilyArg || config.preferences.fontPref.metadata.fontFamily;\n\n  return createIconSet(\n    glyphMap,\n    fontFamily,\n    fontFile || `${fontFamily}.ttf`,\n  );\n}\n","/home/travis/build/npmtest/node-npmtest-react-native-vector-icons/node_modules/react-native-vector-icons/lib/create-icon-set.js":"import React, {\n  Component,\n  PropTypes,\n} from 'react';\n\nimport {\n  NativeModules,\n  Platform,\n  PixelRatio,\n  processColor,\n  Text,\n} from './react-native';\n\nimport createIconButtonComponent from './icon-button';\nimport createTabBarItemIOSComponent from './tab-bar-item-ios';\nimport createToolbarAndroidComponent from './toolbar-android';\n\nconst NativeIconAPI = (NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule);\n\nconst DEFAULT_ICON_SIZE = 12;\nconst DEFAULT_ICON_COLOR = 'black';\n\nexport default function createIconSet(glyphMap, fontFamily, fontFile) {\n  let fontReference = fontFamily;\n  // Android doesn't care about actual fontFamily name, it will only look in fonts folder.\n  if (Platform.OS === 'android' && fontFile) {\n    fontReference = fontFile.replace(/\\.(otf|ttf)$/, '');\n  }\n\n  if (Platform.OS === 'windows' && fontFile) {\n    fontReference = `Assets/${fontFile}#${fontFamily}`;\n  }\n\n  const IconNamePropType = PropTypes.oneOf(Object.keys(glyphMap));\n\n  class Icon extends Component {\n    static propTypes = {\n      ...Text.propTypes,\n      name: IconNamePropType.isRequired,\n      size: PropTypes.number,\n      color: PropTypes.string,\n    };\n\n    static defaultProps = {\n      size: DEFAULT_ICON_SIZE,\n      allowFontScaling: false,\n    };\n\n    setNativeProps(nativeProps) {\n      if (this.root) {\n        this.root.setNativeProps(nativeProps);\n      }\n    }\n\n    root = null;\n    handleRef = (ref) => {\n      this.root = ref;\n    };\n\n    render() {\n      const { name, size, color, style, ...props } = this.props;\n\n      let glyph = glyphMap[name] || '?';\n      if (typeof glyph === 'number') {\n        glyph = String.fromCharCode(glyph);\n      }\n\n      const styleDefaults = {\n        fontSize: size,\n        color,\n      };\n\n      const styleOverrides = {\n        fontFamily: fontReference,\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n      };\n\n      props.style = [styleDefaults, style, styleOverrides];\n      props.ref = this.handleRef;\n\n      return (<Text {...props}>{glyph}{this.props.children}</Text>);\n    }\n  }\n\n  const imageSourceCache = {};\n\n  function getImageSource(name, size = DEFAULT_ICON_SIZE, color = DEFAULT_ICON_COLOR) {\n    if (!NativeIconAPI) {\n      if (Platform.OS === 'android') {\n        throw new Error('RNVectorIconsModule not available, did you properly integrate the module?');\n      }\n      throw new Error('RNVectorIconsManager not available, did you add the library to your project and link with libRNVectorIcons.a?');\n    }\n\n    let glyph = glyphMap[name] || '?';\n    if (typeof glyph === 'number') {\n      glyph = String.fromCharCode(glyph);\n    }\n\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n    const scale = PixelRatio.get();\n\n    return new Promise((resolve, reject) => {\n      const cached = imageSourceCache[cacheKey];\n      if (typeof cached !== 'undefined') {\n        if (!cached || cached instanceof Error) {\n          reject(cached);\n        } else {\n          resolve({ uri: cached, scale });\n        }\n      } else {\n        NativeIconAPI.getImageForFont(fontReference, glyph, size, processedColor, (err, image) => {\n          const error = (typeof err === 'string' ? new Error(err) : err);\n          imageSourceCache[cacheKey] = image || error || false;\n          if (!error && image) {\n            resolve({ uri: image, scale });\n          } else {\n            reject(error);\n          }\n        });\n      }\n    });\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.TabBarItem = createTabBarItemIOSComponent(IconNamePropType, getImageSource);\n  Icon.TabBarItemIOS = Icon.TabBarItem;\n  Icon.ToolbarAndroid = createToolbarAndroidComponent(IconNamePropType, getImageSource);\n  Icon.getImageSource = getImageSource;\n\n  return Icon;\n}\n","/home/travis/build/npmtest/node-npmtest-react-native-vector-icons/node_modules/react-native-vector-icons/lib/icon-button.js":"import isString from 'lodash/isString';\nimport omit from 'lodash/omit';\nimport pick from 'lodash/pick';\n\nimport React, {\n  Component,\n  PropTypes,\n} from 'react';\n\nimport {\n  StyleSheet,\n  Text,\n  TouchableHighlight,\n  View,\n} from './react-native';\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    padding: 8,\n  },\n  touchable: {\n    overflow: 'hidden',\n  },\n  icon: {\n    marginRight: 10,\n  },\n  text: {\n    fontWeight: '600',\n    backgroundColor: 'transparent',\n  },\n});\n\nconst IOS7_BLUE = '#007AFF';\n\nexport default function createIconButtonComponent(Icon) {\n  return class IconButton extends Component {\n    static propTypes = {\n      ...View.propTypes,\n      backgroundColor: PropTypes.string,\n      borderRadius: PropTypes.number,\n      color: PropTypes.string,\n      size: PropTypes.number,\n    };\n\n    static defaultProps = {\n      backgroundColor: IOS7_BLUE,\n      borderRadius: 5,\n      color: 'white',\n      size: 20,\n    };\n\n    render() {\n      const { style, iconStyle, children, ...restProps } = this.props;\n\n      const iconProps = pick(restProps, Object.keys(Text.propTypes), 'style', 'name', 'size', 'color');\n      const touchableProps = pick(restProps, Object.keys(TouchableHighlight.propTypes));\n      const props = omit(\n        restProps,\n        Object.keys(iconProps),\n        Object.keys(touchableProps),\n        'iconStyle',\n        'borderRadius',\n        'backgroundColor',\n      );\n      iconProps.style = (iconStyle ? [styles.icon, iconStyle] : styles.icon);\n\n      const colorStyle = pick(this.props, 'color');\n      const blockStyle = pick(this.props, 'backgroundColor', 'borderRadius');\n\n      return (\n        <TouchableHighlight style={[styles.touchable, blockStyle]} {...touchableProps}>\n          <View\n            style={[styles.container, blockStyle, style]}\n            {...props}\n          >\n            <Icon {...iconProps} />\n            {isString(children)\n              ? (<Text style={[styles.text, colorStyle]}>{children}</Text>)\n              : children\n            }\n          </View>\n        </TouchableHighlight>\n      );\n    }\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-react-native-vector-icons/node_modules/react-native-vector-icons/lib/react-native.js":"export * from 'react-native';\n","/home/travis/build/npmtest/node-npmtest-react-native-vector-icons/node_modules/react-native-vector-icons/lib/react-native.osx.js":"export * from 'react-native-desktop';\n","/home/travis/build/npmtest/node-npmtest-react-native-vector-icons/node_modules/react-native-vector-icons/lib/tab-bar-item-ios.js":"import isEqual from 'lodash/isEqual';\nimport pick from 'lodash/pick';\n\nimport React, {\n  Component,\n  PropTypes,\n} from 'react';\n\nimport {\n  TabBarIOS,\n} from './react-native';\n\nexport default function createTabBarItemIOSComponent(IconNamePropType, getImageSource) {\n  return class TabBarItemIOS extends Component {\n    static propTypes = {\n      iconName: IconNamePropType.isRequired,\n      selectedIconName: IconNamePropType,\n      iconSize: PropTypes.number,\n      iconColor: PropTypes.string,\n      selectedIconColor: PropTypes.string,\n    };\n\n    static defaultProps = {\n      iconSize: 30,\n    };\n\n    updateIconSources(props) {\n      if (props.iconName) {\n        getImageSource(props.iconName, props.iconSize, props.iconColor)\n          .then(icon => this.setState({ icon }));\n      }\n      if (props.selectedIconName || props.selectedIconColor) {\n        const selectedIconName = props.selectedIconName || props.iconName;\n        const selectedIconColor = props.selectedIconColor || props.iconColor;\n        getImageSource(selectedIconName, props.iconSize, selectedIconColor)\n          .then(selectedIcon => this.setState({ selectedIcon }));\n      }\n    }\n\n    componentWillMount() {\n      this.updateIconSources(this.props);\n    }\n\n    componentWillReceiveProps(nextProps) {\n      const keys = Object.keys(TabBarItemIOS.propTypes);\n      if (!isEqual(pick(nextProps, keys), pick(this.props, keys))) {\n        this.updateIconSources(nextProps);\n      }\n    }\n\n    render() {\n      return (<TabBarIOS.Item {...this.props} {...this.state} />);\n    }\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-react-native-vector-icons/node_modules/react-native-vector-icons/lib/toolbar-android.js":"import isEqual from 'lodash/isEqual';\nimport pick from 'lodash/pick';\n\nimport React, {\n  Component,\n  PropTypes,\n} from 'react';\n\nimport {\n  ToolbarAndroid,\n} from './react-native';\n\nexport default function createToolbarAndroidComponent(IconNamePropType, getImageSource) {\n  return class IconToolbarAndroid extends Component {\n    static propTypes = {\n      logoIconName: IconNamePropType,\n      navIconName: IconNamePropType,\n      overflowIconName: IconNamePropType,\n      actions: PropTypes.arrayOf(PropTypes.shape({\n        title: PropTypes.string.isRequired,\n        iconName: IconNamePropType,\n        iconSize: PropTypes.number,\n        iconColor: PropTypes.string,\n        show: PropTypes.oneOf(['always', 'ifRoom', 'never']),\n        showWithText: PropTypes.bool,\n      })),\n      iconSize: PropTypes.number,\n      iconColor: PropTypes.string,\n    };\n\n    static defaultProps = {\n      iconSize: 24,\n    };\n\n    updateIconSources(props) {\n      const size = props.iconSize;\n      const color = props.iconColor || props.titleColor;\n      if (props.logoName) {\n        getImageSource(props.logoName, size, color)\n          .then(logo => this.setState({ logo }));\n      }\n      if (props.navIconName) {\n        getImageSource(props.navIconName, size, color)\n          .then(navIcon => this.setState({ navIcon }));\n      }\n      if (props.overflowIconName) {\n        getImageSource(props.overflowIconName, size, color)\n          .then(overflowIcon => this.setState({ overflowIcon }));\n      }\n\n      Promise.all((props.actions || []).map((action) => {\n        if (action.iconName) {\n          return getImageSource(action.iconName, action.iconSize || size, action.iconColor || color)\n            .then(icon => ({ ...action, icon }));\n        }\n        return Promise.resolve(action);\n      })).then(actions => this.setState({ actions }));\n    }\n\n    componentWillMount() {\n      this.updateIconSources(this.props);\n    }\n\n    componentWillReceiveProps(nextProps) {\n      const keys = Object.keys(IconToolbarAndroid.propTypes);\n      if (!isEqual(pick(nextProps, keys), pick(this.props, keys))) {\n        const stateToEvict = {};\n        if (!nextProps.logoName) {\n          stateToEvict.logo = undefined;\n        }\n        if (!nextProps.navIconName) {\n          stateToEvict.navIcon = undefined;\n        }\n        if (!nextProps.overflowIconName) {\n          stateToEvict.overflowIcon = undefined;\n        }\n        if (this.state && Object.keys(stateToEvict).length) {\n          this.setState(stateToEvict, () => this.updateIconSources(nextProps));\n        } else {\n          this.updateIconSources(nextProps);\n        }\n      }\n    }\n\n    render() {\n      return <ToolbarAndroid {...this.props} {...this.state} />;\n    }\n  };\n}\n"}